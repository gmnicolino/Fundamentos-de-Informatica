Cuando trabajamos con archivos de texto, suele pasar desapercibida la presencia de caracteres que dan formato legible al texto y que no se representan por as√≠ decirlo ‚Äúgraficamente explicitos‚Äù. Un ejemplo de ello es el espacio entre las palabras que tipeamos para constuir una oraci√≥n. Este tipo de caracteres, comunmente conocidos como caracteres especiales, se encuentran respresentados por secuencias de escape.

Las secuencias de escape son una combinaci√≥n de caracteres que tiene un significado distinto de los caracteres literales contenidos en ella y se utilizan para definir ciertos caracteres especiales dentro de cadenas de texto, tipicamente aquellos que dan formato al mismo. Y a√∫n cuando son un conjunto de caracteres, una secuencia de escape se considerada un car√°cter √∫nico.

Estas combinaciones constan tipicamente de una barra invertida (\) seguida de una letra o de una combinaci√≥n de d√≠gitos, que tendr√° un significado distinto seg√∫n cuales sean. Por ejemplo, para representar un car√°cter de salto de l√≠nea se utiliza la secuencia de espace \n.

Vamos a ver algunas de las secuencias de escape m√°s frecuentes:

Secuencia de escape	representaci√≥n
\n	salto de l√≠nea
\t	Tab o cambio de columna
\s	espacio
'	Comillas simples
"	Comillas dobles
2. ¬øQu√© son las expresiones regulares?

Las expresiones regulares son cadenas de caracteres basadas en reglas sint√°cticas, que permiten describir secuencias de caracteres. Es decir es un criterio para buscar, capturar o reemplazar texto utilizando patrones. Estas son una herramienta poderosa a la hora de hacer b√∫squedas sofisticadas en Strings de forma simple.

Las expresiones regulares se pueden concatenar para formar nuevas expresiones regulares; si, por ejemplo, A y B son expresiones regulares, AB tambi√©n es una expresi√≥n regular.

Para pensar ü§î: ¬øQu√© usos crees que podemos darle a las expresiones regulares? Propon√© una aplicaci√≥n concreta para tu carrera/disciplina.

3. Metacaracteres

Los metacaracteres son caracteres especiales que, dependiendo del contexto, tienen un significado especial para las expresiones regulares.

Existen lo que se conoce como metacaracteres delimitadores, que nos permitir√°n delimitar d√≥nde queremos buscar los patrones de b√∫squeda. Entre ellos tenemos:

Metacaracter	Significado
^	Inicio de l√≠nea
$	Fin de linea
\A	Inicio de texto
\Z	Fin de texto
.	Coincide con cualquier caracter en una l√≠nea dada
Para pensar ü§î: Dado el siguiente texto:

texto = 'Esta es la linea uno\npalabra en la linea dos\n'
¬øC√≥mo crees que dar√°n las siguientes b√∫squedas?

expresion regular a: '^palabra'

expresion regular b: '\Apalabra'

expresion regular c: 'palabra$'

expresion regular d: 'palabra\Z'

Ya vimos que en programaci√≥n suele ser √∫til repetir la ejecuci√≥n de porciones de c√≥digo. Las expresiones regulares nos permiten no solo delimitar la porci√≥n de texto donde deseamos buscar, sino que tambi√©n permite repitir cierta cantidad de veces una busqueda dada. Para ello se utilizan los metacaracteres cuantificadores:

Metacaracter	Significado
*	Cero o m√°s: todas las ocurrencias de un dado substring
+	Una o m√°s ocurrencias del patr√≥n
?	Cero o una
{n}	Exactamente n veces
{n,m}	Por lo menos n pero no m√°s de m veces.
Para pensar ü§î: ¬øQu√© significar√° la expresi√≥n regular "X(.*)Y"? Ennumera algunas de las posibles strings que cumplen con dicha condici√≥n.

üßó‚Äç‚ôÄÔ∏è Desaf√≠o I: ¬øConstru√≠ la expresi√≥n regular que obtenga al menos 4 d√≠gitos?

üßó‚Äç‚ôÄÔ∏è Desaf√≠o II: ¬øConstru√≠ la expresi√≥n regular que obtenga al entre 3 y 6 letras min√∫sculas?

üßó‚Äç‚ôÄÔ∏è Desaf√≠o III: ¬øConstru√≠ la expresi√≥n regular que obtenga todas las apariciones del patr√≥n ab en un string?

Respuestas
Para pensar ü§î: ¬øExiste una √∫nica respuesta para los ejercicios? ¬øQu√© otras alternativas se te ocurren?

Los d√≠gitos entre llaves de la forma {n,m}, especifican el m√≠nimo n√∫mero de ocurrencias en n y el m√°ximo en m.

Existen tambien metacaracteres predefinidos, que nos facilitan el uso de las expresiones regulares:

Metacaracter	Significado
\w	Caracter alfanum√©rcio
\W	Caracter NO alfanum√©rcio
\d	Caracter num√©rcio
\D	Caracter NO num√©rcio
\s	Un espacio, de cualquier tipo (\t\n\r\f)
\S	Cualquier caracter que no sea un espacio
Como ya hemos visto, estos metacaracteres puden combinarse para lograr expresiones regulares complejas.

üßó‚Äç‚ôÄÔ∏èDesafio IV: ¬øQu√© expresi√≥n regular usar√≠as para extraer el n√∫mero de estudiantes que hay en una clase seg√∫n el siguiente texto:

texto = 'En la clase de Introducci√≥n a la programaci√≥n hay 30 estudiantes'
Respuestas
Rangos

Un rango es una clase de caracteres abreviada que se crea escribiendo el primer caracter del rango, un gui√≥n y el √∫ltimo caracter del rango. Sirve para listar un conjunto de caracteres de inter√©s, de este modo se encontrar√° uno cualquiera de los caracteres de la lista. Por ejemplo:

- El rango [a-d] equivale al [abcd]
- El rango [1-10] equivale al substring [12345678910]
- El rango [Dd] equivale a buscar una D may√∫scula y una d min√∫scula
As√≠ como podemos listar los caracteres posibles en cierta posici√≥n de la cadena, tambi√©n podemos listar caracteres que no deben aparecer utilizando el ^. As√≠, por ejemplo rango [^a-d] coincide con cualquier caracter que no sea abcd.

4. Expresiones regulares en Python

Para trabajar con expresiones regulares en Python, es necesaria la librer√≠a RE, que puede ser instalada usando el instalador de Python (PIP):

pip install re
De todos modos, antes de instalar una librer√≠a siempre es importante comprobar si esta est√° o no instalada. Para ello, desde una terminal de Python debemos escribir:

import re
Si la librer√≠a est√° instalada no nos aparecer√° ning√∫n error.

5. Coincidencias o Matches

Comenzaremos por aprender sobre las expresiones regulares m√°s simples posibles. Dado que las expresiones regulares se utilizan para operar en strings, vamos a empezas con la tarea m√°s com√∫n: los caracteres coincidentes.

Si un String se corresponde con el criterio que define una expresi√≥n regular, se dice que el String hace match con la expresi√≥n, y equivalentemente, se dice que la expresi√≥n acepta al String.

Podemos encontrar patrones en un texto con el funci√≥n search:

>>> import re
>>> texto = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Amet et amet."
>>> patron = "amet"
>>> re.search(patron, texto)
Para pensar ü§î: ¬øQu√© resultado obtenemos al ejecutar en la √∫ltima linea?

üßó‚Äç‚ôÄÔ∏èDesafio V: imprim√≠ el fragmento del texto entre la posici√≥n 22 y 26 ¬øQu√© resultado obten√©s? ¬øQu√© quiere decir el mensaje span?

Ahora veamos qu√© hace match():

>>> import re
>>> texto = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Amet et amet."
>>> patron = "amet"
>>> re.match(patron, texto)
Para pensar ü§î: ¬øQu√© resultado obtenemos con search()?¬øQu√© diferencias observan con match()?

Detalles
Vamos a ejecutar la √∫ltima linea con una modificaci√≥n:

>>> import re
>>> texto = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Amet et amet."
>>> patron = "amet"
>>> re.search(patron, texto).group()
Para pensar ü§î: ¬øQu√© resultado obtenemos? ¬øPara qu√© sirve la funci√≥n group()?

Utilicemos ahora otro m√©todo que nos permita obtener todas las ocurrencias del substring ‚Äúamet‚Äù

>>> re.findall(patron, texto)
Para pensar ü§î: ¬øQu√© resultado obtenemos?

üßó‚Äç‚ôÄÔ∏èDesafio VI: Expres√° el patron de b√∫squeda utilizando lo visto anteriormente sobre metacaracteres y rangos.

Como vimos hasta ac√° el m√©todo group() sirve para mostrar el resultado de una b√∫squeda, pero veamos:

>>> import re
>>> texto = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Amet et amet."
>>> patron = "amet"
>>> re.search(patron, texto).group()
'amet'
>>> re.search(patron, texto).group(0)
'amet'
El m√©todo group() (o group(0)) nos devuelve la coincidencia. Sin embargo si lo que se quiere no es encontrar un patr√≥n en particular, sino obtener lo que est√° dentro de cierto patr√≥n (por ejemplo lo que hay entre ciertas palabras) hay que modificar el patr√≥n. Vamos a ver el siguiente ejemplo:

>>> import re
>>> texto = "Lorem ipsum dolor sit amet, consectetur ipsum elit. Amet sit amet."
>>> patron = "ipsum(.*)sit"
>>> re.search(patron, texto).group()
'ipsum dolor sit amet, consectetur ipsum elit. Amet sit'
>>> re.search(patron, texto).group(0)
'ipsum dolor sit amet, consectetur ipsum elit. Amet sit'
>>> re.search(patron, texto).group(1)
' dolor sit amet, consectetur ipsum elit. Amet '
Ac√° se utilizaron algunos metacaracteres, como lo son el punto (.) para indicar que puede ser cualquier car√°cter, y el aster√≠sco (*) para indicar que puede haber 0 o m√°s de estos caracteres. De esta manera obtenemos como resultado lo que se encuentre entre las palabras ‚Äúipsum‚Äù y ‚Äúsit‚Äù, sin embargo observen dos cosas. Primero, el string que nos devuelve tiene dentro un substring que deber√≠a haber sido encontrado en la b√∫squeda: ‚Äúipsum dolor sit‚Äù, pero que sin embargo no aparece. Segundo, nuevamente al hacer group() o group(0) obtenemos la coincidencia, pero si nos queremos quedar con el substring que est√° contenido entre estas palabras debemos utilizar group(1). Ahora bien, como vimos, usar el patr√≥n de b√∫squeda de esta manera prioriza los matches externos, es decir, busca el primer delimitador (‚Äúipsum‚Äù en nuestro caso) y luego abarca todo hasta la √∫ltima aparici√≥n del segundo delimitador (‚Äúsit‚Äù). Existe una forma de priorizar los matches internos y es con el metacar√°cter ?:

>>> import re
>>> texto = "Lorem ipsum dolor sit amet, consectetur ipsum elit. Amet sit amet."
>>> patron = "ipsum(.*?)sit"
>>> re.search(patron, texto).group()
'ipsum dolor sit'
>>> re.search(patron, texto).group(0)
'ipsum dolor sit'
>>> re.search(patron, texto).group(1)
' dolor  '
Cuando se quieren obtener todas las apariciones del patr√≥n se utiliza el m√©todo findall el cual act√∫a para cada coincidencia como si devolviera el group(1), es decir devuelve en una lista la parte que se encuentra dentro de los delimitadores.

>>> import re
>>> texto = "Lorem ipsum dolor sit amet, consectetur ipsum elit. Amet sit amet."
>>> patron = "ipsum(.*?)sit"
>>> re.findall(patron, texto)
[' dolor ', ' elit. Amet ']
6. Reemplazos o sustituciones masivas

Ejecutemos ahora la siguiente l√≠nea:

>>> re.sub(patron, "###", texto)
Para pensar ü§î: ¬øQu√© resultado obtenemos? ¬øPara qu√© sirve la funci√≥n sub?

La funci√≥n sub permite reemplazar todos las ocurrencias del patr√≥n por otro patr√≥n en un String.